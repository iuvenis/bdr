-- tests for functions and triggers
\c postgres super
SELECT bdr.bdr_replicate_ddl_command($DDL$ 
CREATE FUNCTION public.test_fn(IN inpar character varying (20), INOUT inoutpar integer, OUT timestamp with time zone) RETURNS SETOF record AS
$$
BEGIN
	PERFORM E'\t\r\n\b\f';
END;
$$ LANGUAGE plpgsql IMMUTABLE  STRICT;
$DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

\df test_fn
                                                     List of functions
 Schema |  Name   | Result data type |                              Argument data types                              | Type 
--------+---------+------------------+-------------------------------------------------------------------------------+------
 public | test_fn | SETOF record     | inpar character varying, INOUT inoutpar integer, OUT timestamp with time zone | func
(1 row)

\c regression
\df test_fn
                                                     List of functions
 Schema |  Name   | Result data type |                              Argument data types                              | Type 
--------+---------+------------------+-------------------------------------------------------------------------------+------
 public | test_fn | SETOF record     | inpar character varying, INOUT inoutpar integer, OUT timestamp with time zone | func
(1 row)

SELECT bdr.bdr_replicate_ddl_command($DDL$ ALTER FUNCTION public.test_fn(varchar, integer) SECURITY DEFINER CALLED ON NULL INPUT VOLATILE ROWS 1 COST 1; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

\df test_fn
                                                     List of functions
 Schema |  Name   | Result data type |                              Argument data types                              | Type 
--------+---------+------------------+-------------------------------------------------------------------------------+------
 public | test_fn | SETOF record     | inpar character varying, INOUT inoutpar integer, OUT timestamp with time zone | func
(1 row)

\c postgres
\df test_fn
                                                     List of functions
 Schema |  Name   | Result data type |                              Argument data types                              | Type 
--------+---------+------------------+-------------------------------------------------------------------------------+------
 public | test_fn | SETOF record     | inpar character varying, INOUT inoutpar integer, OUT timestamp with time zone | func
(1 row)

SELECT bdr.bdr_replicate_ddl_command($DDL$ 
CREATE OR REPLACE FUNCTION public.test_fn(IN inpar varchar, INOUT inoutpar integer, OUT timestamp with time zone) RETURNS SETOF record AS 
$$
BEGIN
END;
$$ LANGUAGE plpgsql STABLE;
$DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

\df test_fn
                                                     List of functions
 Schema |  Name   | Result data type |                              Argument data types                              | Type 
--------+---------+------------------+-------------------------------------------------------------------------------+------
 public | test_fn | SETOF record     | inpar character varying, INOUT inoutpar integer, OUT timestamp with time zone | func
(1 row)

\c regression
\df test_fn
                                                     List of functions
 Schema |  Name   | Result data type |                              Argument data types                              | Type 
--------+---------+------------------+-------------------------------------------------------------------------------+------
 public | test_fn | SETOF record     | inpar character varying, INOUT inoutpar integer, OUT timestamp with time zone | func
(1 row)

SELECT bdr.bdr_replicate_ddl_command($DDL$ DROP FUNCTION public.test_fn(varchar, integer); $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

\df test_fn
                       List of functions
 Schema | Name | Result data type | Argument data types | Type 
--------+------+------------------+---------------------+------
(0 rows)

\c postgres
\df test_fn
                       List of functions
 Schema | Name | Result data type | Argument data types | Type 
--------+------+------------------+---------------------+------
(0 rows)

SELECT bdr.bdr_replicate_ddl_command($DDL$ CREATE FUNCTION public.test_trigger_fn() RETURNS trigger AS 
$$
BEGIN
END;
$$ LANGUAGE plpgsql;
$DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

\df test_trigger_fn
                            List of functions
 Schema |      Name       | Result data type | Argument data types | Type 
--------+-----------------+------------------+---------------------+------
 public | test_trigger_fn | trigger          |                     | func
(1 row)

SELECT bdr.bdr_replicate_ddl_command($DDL$ CREATE FUNCTION public.showtrigstate(rel regclass) 
RETURNS TABLE (
	tgname name,
	tgenabled "char",
	tgisinternal boolean)
LANGUAGE sql AS
$$
SELECT
  CASE WHEN t.tgname LIKE 'truncate_trigger%' THEN 'truncate_trigger' ELSE t.tgname END,
  t.tgenabled, t.tgisinternal
FROM pg_catalog.pg_trigger t
WHERE t.tgrelid = $1
ORDER BY t.tgname;
$$;
$DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.bdr_replicate_ddl_command($DDL$ CREATE TABLE public.test_trigger_table (f1 integer, f2 text); $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.bdr_replicate_ddl_command($DDL$
CREATE TRIGGER test_trigger_fn_trg1 BEFORE INSERT OR DELETE ON public.test_trigger_table FOR EACH STATEMENT WHEN (True) EXECUTE PROCEDURE public.test_trigger_fn(); 
$DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.bdr_replicate_ddl_command($DDL$ 
CREATE TRIGGER test_trigger_fn_trg2 AFTER UPDATE OF f1 ON public.test_trigger_table FOR EACH ROW EXECUTE PROCEDURE public.test_trigger_fn(); 
$DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

-- We can't use \d+ here because tgisinternal triggers have names with the oid
-- appended, and that varies run-to-run. Use a custom query.
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg1 | O         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | O         | t
(3 rows)

\c regression
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg1 | O         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | O         | t
(3 rows)

SELECT bdr.bdr_replicate_ddl_command($DDL$ ALTER TRIGGER test_trigger_fn_trg1 ON public.test_trigger_table RENAME TO test_trigger_fn_trg; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | O         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | O         | t
(3 rows)

\c postgres
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | O         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | O         | t
(3 rows)

SELECT bdr.bdr_replicate_ddl_command($DDL$ ALTER TABLE public.test_trigger_table DISABLE TRIGGER test_trigger_fn_trg; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | D         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | O         | t
(3 rows)

\c regression
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | D         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | O         | t
(3 rows)

SELECT bdr.bdr_replicate_ddl_command($DDL$ ALTER TABLE public.test_trigger_table DISABLE TRIGGER ALL; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | D         | f
 test_trigger_fn_trg2 | D         | f
 truncate_trigger     | D         | t
(3 rows)

\c postgres
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | D         | f
 test_trigger_fn_trg2 | D         | f
 truncate_trigger     | D         | t
(3 rows)

SELECT bdr.bdr_replicate_ddl_command($DDL$ ALTER TABLE public.test_trigger_table ENABLE TRIGGER test_trigger_fn_trg2; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | D         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | D         | t
(3 rows)

\c regression
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | D         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | D         | t
(3 rows)

SELECT bdr.bdr_replicate_ddl_command($DDL$ ALTER TABLE public.test_trigger_table ENABLE TRIGGER USER; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | O         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | D         | t
(3 rows)

\c postgres
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | O         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | D         | t
(3 rows)

SELECT bdr.bdr_replicate_ddl_command($DDL$ ALTER TABLE public.test_trigger_table ENABLE ALWAYS TRIGGER test_trigger_fn_trg; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | A         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | D         | t
(3 rows)

\c regression
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | A         | f
 test_trigger_fn_trg2 | O         | f
 truncate_trigger     | D         | t
(3 rows)

SELECT bdr.bdr_replicate_ddl_command($DDL$ ALTER TABLE public.test_trigger_table ENABLE REPLICA TRIGGER test_trigger_fn_trg2; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | A         | f
 test_trigger_fn_trg2 | R         | f
 truncate_trigger     | D         | t
(3 rows)

\c postgres
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
        tgname        | tgenabled | tgisinternal 
----------------------+-----------+--------------
 test_trigger_fn_trg  | A         | f
 test_trigger_fn_trg2 | R         | f
 truncate_trigger     | D         | t
(3 rows)

SELECT bdr.bdr_replicate_ddl_command($DDL$ DROP TRIGGER test_trigger_fn_trg2 ON public.test_trigger_table; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

SELECT * FROM showtrigstate('test_trigger_table'::regclass);
       tgname        | tgenabled | tgisinternal 
---------------------+-----------+--------------
 test_trigger_fn_trg | A         | f
 truncate_trigger    | D         | t
(2 rows)

\c regression
SELECT * FROM showtrigstate('test_trigger_table'::regclass);
       tgname        | tgenabled | tgisinternal 
---------------------+-----------+--------------
 test_trigger_fn_trg | A         | f
 truncate_trigger    | D         | t
(2 rows)

-- should fail (for test to be useful it should be called on different node than SELECT bdr.bdr_replicate_ddl_command($DDL$ CREATE FUNCTION) $DDL$);
SELECT bdr.bdr_replicate_ddl_command($DDL$ DROP FUNCTION public.test_trigger_fn(); $DDL$);
ERROR:  cannot drop function public.test_trigger_fn() because other objects depend on it
DETAIL:  trigger test_trigger_fn_trg on table public.test_trigger_table depends on function public.test_trigger_fn()
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
CONTEXT:  during DDL replay of ddl statement:  DROP FUNCTION public.test_trigger_fn(); 
SELECT bdr.bdr_replicate_ddl_command($DDL$ DROP TABLE public.test_trigger_table; $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.bdr_replicate_ddl_command($DDL$ DROP FUNCTION public.test_trigger_fn(); $DDL$);
 bdr_replicate_ddl_command 
---------------------------
 
(1 row)

SELECT bdr.wait_slot_confirm_lsn(NULL,NULL);
 wait_slot_confirm_lsn 
-----------------------
 
(1 row)

\d+ test_trigger_table
\c postgres
\d+ test_trigger_table
\df test_trigger_fn
                       List of functions
 Schema | Name | Result data type | Argument data types | Type 
--------+------+------------------+---------------------+------
(0 rows)

